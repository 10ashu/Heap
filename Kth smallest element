// Brute Force
Time Complexity; NlogN
space complexity: O(n)
class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        vector<int> ans;
        for(int i=0;i<=r;i++)
        {
            ans.push_back(arr[i]);
        }
     sort(ans.begin(),ans.end());
     return ans[k-1];
    }
};


// Using min heap
Time Complexity: O(n)+O(k)=O(n)
Space complexity: O(n)
class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<=r;i++)
        {
            pq.push(arr[i]);
        }
        while(k!=1)
        {
            pq.pop();
            k--;
        }
        return pq.top();
    }
};


// Using max heap  Best Approach
Time Complexity: O(nlogk)
Space Complexity: O(K)   // K refers that we insert only k elments in the max heap
 class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        priority_queue<int> pq;
        for(int i=0;i<k;i++)
        {
            pq.push(arr[i]);
        }
        for(int i=k;i<=r;i++)
        {
            if(pq.top()>arr[i])
            {
                pq.pop();
                pq.push(arr[i]);
            }
        }
        return pq.top();
    }
};


