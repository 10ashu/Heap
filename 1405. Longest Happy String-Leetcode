class Node{
public:
 char data;
 int count;
 Node(char c,int cnt)
 {
     data=c;
     count=cnt;
 } 
};
class compare{
   public:
   bool operator()(Node* a,Node* b)
   {
       return a->count<b->count;
   }
};
class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        priority_queue<Node*,vector<Node*> ,compare> maxheap;
        Node* first=new Node('a',a);
        Node* second=new Node('b',b);
        Node* third=new Node('c',c);
        if(a>0)
        maxheap.push(first);
        if(b>0)
        maxheap.push(second);
        if(c>0)
        maxheap.push(third);
        string ans="";
        while(maxheap.size()>1)
        {
            Node* first=maxheap.top();
            maxheap.pop();
            Node* second=maxheap.top();
            maxheap.pop();
            if(first->count>2)
            {
                ans=ans+first->data;
                ans=ans+first->data;
                first->count=first->count-2;
            }
            else{
                ans=ans+first->data;
                first->count=first->count-1;
            }
            if(second->count>2&&second->count>first->count)
            {
                ans=ans+second->data;
                ans=ans+second->data;
                second->count=second->count-2;
            }
            else
            {
                ans=ans+second->data;
                second->count=second->count-1;
            }
            if(first->count!=0)
            {
                maxheap.push(first);
            }
            if(second->count!=0)
            {
                maxheap.push(second);
            }
        }
        if(maxheap.size()==1)
        {
            Node* temp=maxheap.top();
            if(temp->count>=2)
            {
                ans=ans+temp->data;
                ans=ans+temp->data;
            }
            else
            {
                ans=ans+temp->data;
            }

        }
        return ans;
    }
};
