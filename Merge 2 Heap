class Solution{
    public:
       void heapify(vector<int> &arr, int n, int i)  
    {
      int index=i;
      int left=2*i+1;
      int right=2*i+2;
      int largest=index;
      if( left<n && arr[largest] < arr[left] )
      {
          largest=left;
      }
      if( right<n && arr[largest]< arr[right])
      {
        largest=right;
      }
      if(largest!=index)
      {
        swap(arr[largest],arr[index]);
        index=largest;
        heapify(arr,n,index);
      }
    }
        void buildHeap(vector<int> &arr, int n)  
    { 
        int index=(n/2)-1;
    for(int i=index;i>=0;i--)
    {
        heapify(arr,n,i);
    }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        for(auto i:a)
        {
            ans.push_back(i);
        }
        for(auto i:b)
        {
            ans.push_back(i);
        }
        buildHeap(ans,ans.size());
        return ans;
    }
};
